\import Paths

\func DepPath {X : \Type} {x x' : X} {Y : X -> \Type} (p : x = x') (y : Y x) (y' : Y x'): \Type \elim p
  | idp => y = y' \where {
  \func Of (Y : X -> \Type) (p : x = x') (y : Y x) (y' : Y x') => DepPath p y y'

  \func pe (p : x = x'): Path (\lam i => Y (p @ i)) y y' = DepPath p y y' \elim p
    | idp => idp

  \func dp-transport  (p : x = x') : DepPath p y y' = (transport Y p y = y') \elim p
    | idp => idp

  \func dcomp {x'' : X} (y'' : Y x'') (p : x = x') (p' : x' = x'')
              (q : DepPath p y y') (q' : DepPath p' y' y'') : DepPath (p *> p') y y'' \elim p', q'
    | idp, idp => q \where {
    \func idl (p : x = x') (q : DepPath p y y') : dcomp p idp q idp = q => idp
  }

  \func dinv (p : x = x') (q : DepPath p y y') : DepPath (inv p) y' y \elim p
    | idp => inv q

  \func apd (p : x = x') (f : \Pi(x : X) -> Y x) : DepPath p (f x) (f x') \elim p
    | idp => idp

  \func apap {Z : \Type} (g : \Pi (x : X) (Y x) -> Z) (p : x = x') (q : DepPath p y y'): g x y = g x' y' \elim p, q
    | idp, idp => idp

  \func dcompr (y'' : Y x') (p : x = x') (q : DepPath p y y') (q' : y' = y'') : DepPath p y y'' \elim q'
    | idp => q

  \func dcompl (y'' : Y x) (p : x = x') (q : DepPath p y y') (q' :  y'' = y): DepPath p y'' y' \elim q'
    | idp => q
}






